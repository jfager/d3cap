#![allow(dead_code)]
#![allow(non_camel_case_types)]

/* automatically generated by rust-bindgen */

use std::libc::*;
pub type __int128_t = c_void;
pub type __uint128_t = c_void;
pub type __builtin_va_list = [__va_list_tag, ..1u];
pub type __int8_t = c_schar;
pub type __uint8_t = c_uchar;
pub type __int16_t = c_short;
pub type __uint16_t = c_ushort;
pub type __int32_t = c_int;
pub type __uint32_t = c_uint;
pub type __int64_t = c_longlong;
pub type __uint64_t = c_ulonglong;
pub type __darwin_intptr_t = c_long;
pub type __darwin_natural_t = c_uint;
pub type __darwin_ct_rune_t = c_int;
pub struct __mbstate_t {
    data: [u64, ..16u],
}
impl __mbstate_t {
    pub fn __mbstate8(&mut self) -> *mut [c_schar, ..128u] {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn _mbstateL(&mut self) -> *mut c_longlong {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = c_long;
pub type __darwin_size_t = c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = c_int;
pub type __darwin_clock_t = c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = c_long;
pub type __darwin_time_t = c_long;
pub type int8_t = c_schar;
pub type u_int8_t = c_uchar;
pub type int16_t = c_short;
pub type u_int16_t = c_ushort;
pub type int32_t = c_int;
pub type u_int32_t = c_uint;
pub type int64_t = c_longlong;
pub type u_int64_t = c_ulonglong;
pub type register_t = int64_t;
pub type intptr_t = __darwin_intptr_t;
pub type uintptr_t = c_ulong;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = int64_t;
pub type user_long_t = int64_t;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = int64_t;
pub type user_off_t = int64_t;
pub type syscall_arg_t = u_int64_t;
pub struct Struct___darwin_pthread_handler_rec {
    __routine: ::std::option::Option<extern "C" fn(arg1: *mut c_void)>,
    __arg: *mut c_void,
    __next: *mut Struct___darwin_pthread_handler_rec,
}
pub struct Struct__opaque_pthread_attr_t {
    __sig: c_long,
    __opaque: [c_schar, ..56u],
}
pub struct Struct__opaque_pthread_cond_t {
    __sig: c_long,
    __opaque: [c_schar, ..40u],
}
pub struct Struct__opaque_pthread_condattr_t {
    __sig: c_long,
    __opaque: [c_schar, ..8u],
}
pub struct Struct__opaque_pthread_mutex_t {
    __sig: c_long,
    __opaque: [c_schar, ..56u],
}
pub struct Struct__opaque_pthread_mutexattr_t {
    __sig: c_long,
    __opaque: [c_schar, ..8u],
}
pub struct Struct__opaque_pthread_once_t {
    __sig: c_long,
    __opaque: [c_schar, ..8u],
}
pub struct Struct__opaque_pthread_rwlock_t {
    __sig: c_long,
    __opaque: [c_schar, ..192u],
}
pub struct Struct__opaque_pthread_rwlockattr_t {
    __sig: c_long,
    __opaque: [c_schar, ..16u],
}
pub struct Struct__opaque_pthread_t {
    __sig: c_long,
    __cleanup_stack: *mut Struct___darwin_pthread_handler_rec,
    __opaque: [c_schar, ..1168u],
}
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = c_uint;
pub type __darwin_fsfilcnt_t = c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_pthread_attr_t = Struct__opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = Struct__opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = Struct__opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = c_ulong;
pub type __darwin_pthread_mutex_t = Struct__opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = Struct__opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = Struct__opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = Struct__opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = Struct__opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut Struct__opaque_pthread_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [c_uchar, ..16u];
pub type __darwin_uuid_string_t = [c_schar, ..37u];
pub type u_char = c_uchar;
pub type u_short = c_ushort;
pub type u_int = c_uint;
pub type u_long = c_ulong;
pub type ushort = c_ushort;
pub type _uint = c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = int64_t;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut c_schar;
pub type daddr_t = int32_t;
pub type dev_t = __darwin_dev_t;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type mode_t = __darwin_mode_t;
pub type nlink_t = __uint16_t;
pub type id_t = __darwin_id_t;
pub type pid_t = __darwin_pid_t;
pub type off_t = __darwin_off_t;
pub type segsz_t = int32_t;
pub type swblk_t = int32_t;
pub type uid_t = __darwin_uid_t;
pub type clock_t = __darwin_clock_t;
pub type size_t = __darwin_size_t;
pub type ssize_t = __darwin_ssize_t;
pub type time_t = __darwin_time_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub struct Struct_fd_set {
    fds_bits: [__int32_t, ..32u],
}
pub type fd_set = Struct_fd_set;
pub type fd_mask = __int32_t;
pub type pthread_attr_t = __darwin_pthread_attr_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
pub struct Struct_timespec {
    tv_sec: __darwin_time_t,
    tv_nsec: c_long,
}
pub struct Struct_timeval {
    tv_sec: __darwin_time_t,
    tv_usec: __darwin_suseconds_t,
}
pub struct Struct_itimerval {
    it_interval: Struct_timeval,
    it_value: Struct_timeval,
}
pub struct Struct_timezone {
    tz_minuteswest: c_int,
    tz_dsttime: c_int,
}
pub struct Struct_clockinfo {
    hz: c_int,
    tick: c_int,
    tickadj: c_int,
    stathz: c_int,
    profhz: c_int,
}
pub type __darwin_nl_item = c_int;
pub type __darwin_wctrans_t = c_int;
pub type __darwin_wctype_t = __uint32_t;
pub struct Struct_tm {
    tm_sec: c_int,
    tm_min: c_int,
    tm_hour: c_int,
    tm_mday: c_int,
    tm_mon: c_int,
    tm_year: c_int,
    tm_wday: c_int,
    tm_yday: c_int,
    tm_isdst: c_int,
    tm_gmtoff: c_long,
    tm_zone: *mut c_schar,
}
pub type bpf_int32 = c_int;
pub type bpf_u_int32 = u_int;
pub struct Struct_bpf_program {
    bf_len: u_int,
    bf_insns: *mut Struct_bpf_insn,
}
pub struct Struct_bpf_version {
    bv_major: u_short,
    bv_minor: u_short,
}
pub struct Struct_bpf_insn {
    code: u_short,
    jt: u_char,
    jf: u_char,
    k: bpf_u_int32,
}
pub type va_list = __darwin_va_list;
pub type fpos_t = __darwin_off_t;
pub struct Struct___sbuf {
    _base: *mut c_uchar,
    _size: c_int,
}
pub type Struct___sFILEX = c_void;
pub struct Struct___sFILE {
    _p: *mut c_uchar,
    _r: c_int,
    _w: c_int,
    _flags: c_short,
    _file: c_short,
    _bf: Struct___sbuf,
    _lbfsize: c_int,
    _cookie: *mut c_void,
    _close: ::std::option::Option<extern "C" fn(arg1: *mut c_void) -> c_int>,
    _read: ::std::option::Option<extern "C" fn
                                     (arg1: *mut c_void, arg2: *mut c_schar,
                                      arg3: c_int) -> c_int>,
    _seek: ::std::option::Option<extern "C" fn
                                     (arg1: *mut c_void, arg2: fpos_t,
                                      arg3: c_int) -> fpos_t>,
    _write: ::std::option::Option<extern "C" fn
                                      (arg1: *mut c_void, arg2: *c_schar,
                                       arg3: c_int) -> c_int>,
    _ub: Struct___sbuf,
    _extra: *mut Struct___sFILEX,
    _ur: c_int,
    _ubuf: [c_uchar, ..3u],
    _nbuf: [c_uchar, ..1u],
    _lb: Struct___sbuf,
    _blksize: c_int,
    _offset: fpos_t,
}
pub type FILE = Struct___sFILE;
pub type Struct_pcap = c_void;
pub type pcap_t = Struct_pcap;
pub type Struct_pcap_dumper = c_void;
pub type pcap_dumper_t = Struct_pcap_dumper;
pub type pcap_if_t = Struct_pcap_if;
pub type pcap_addr_t = Struct_pcap_addr;
pub struct Struct_pcap_file_header {
    magic: bpf_u_int32,
    version_major: u_short,
    version_minor: u_short,
    thiszone: bpf_int32,
    sigfigs: bpf_u_int32,
    snaplen: bpf_u_int32,
    linktype: bpf_u_int32,
}
pub type pcap_direction_t = c_uint;
pub static PCAP_D_INOUT: c_uint = 0;
pub static PCAP_D_IN: c_uint = 1;
pub static PCAP_D_OUT: c_uint = 2;
pub struct Struct_pcap_pkthdr {
    ts: Struct_timeval,
    caplen: bpf_u_int32,
    len: bpf_u_int32,
}
pub struct Struct_pcap_stat {
    ps_recv: u_int,
    ps_drop: u_int,
    ps_ifdrop: u_int,
}
pub struct Struct_pcap_if {
    next: *mut Struct_pcap_if,
    name: *mut c_schar,
    description: *mut c_schar,
    addresses: *mut Struct_pcap_addr,
    flags: bpf_u_int32,
}
pub struct Struct_pcap_addr {
    next: *mut Struct_pcap_addr,
    addr: *mut Struct_sockaddr,
    netmask: *mut Struct_sockaddr,
    broadaddr: *mut Struct_sockaddr,
    dstaddr: *mut Struct_sockaddr,
}
pub type Struct_sockaddr = c_void;
pub type pcap_handler =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut u_char, arg2: *Struct_pcap_pkthdr,
                               arg3: *u_char)>;
pub type __va_list_tag = Struct___va_list_tag;
pub struct Struct___va_list_tag {
    gp_offset: c_uint,
    fp_offset: c_uint,
    overflow_arg_area: *mut c_void,
    reg_save_area: *mut c_void,
}
#[link(name = "pcap")]
extern "C" {
    pub static mut tzname: c_void;
    pub static mut getdate_err: c_int;
    pub static mut timezone: c_long;
    pub static mut daylight: c_int;
    pub static mut __stdinp: *mut FILE;
    pub static mut __stdoutp: *mut FILE;
    pub static mut __stderrp: *mut FILE;
    pub static sys_nerr: c_int;
    pub static mut sys_errlist: c_void;
    pub fn asctime(arg1: *Struct_tm) -> *mut c_schar;
    pub fn clock() -> clock_t;
    pub fn ctime(arg1: *time_t) -> *mut c_schar;
    pub fn difftime(arg1: time_t, arg2: time_t) -> c_double;
    pub fn getdate(arg1: *c_schar) -> *mut Struct_tm;
    pub fn gmtime(arg1: *time_t) -> *mut Struct_tm;
    pub fn localtime(arg1: *time_t) -> *mut Struct_tm;
    pub fn mktime(arg1: *mut Struct_tm) -> time_t;
    pub fn strftime(arg1: *mut c_schar, arg2: size_t, arg3: *c_schar,
                    arg4: *Struct_tm) -> size_t;
    pub fn strptime(arg1: *c_schar, arg2: *c_schar, arg3: *mut Struct_tm) ->
     *mut c_schar;
    pub fn time(arg1: *mut time_t) -> time_t;
    pub fn tzset();
    pub fn asctime_r(arg1: *Struct_tm, arg2: *mut c_schar) -> *mut c_schar;
    pub fn ctime_r(arg1: *time_t, arg2: *mut c_schar) -> *mut c_schar;
    pub fn gmtime_r(arg1: *time_t, arg2: *mut Struct_tm) -> *mut Struct_tm;
    pub fn localtime_r(arg1: *time_t, arg2: *mut Struct_tm) -> *mut Struct_tm;
    pub fn posix2time(arg1: time_t) -> time_t;
    pub fn tzsetwall();
    pub fn time2posix(arg1: time_t) -> time_t;
    pub fn timelocal(arg1: *mut Struct_tm) -> time_t;
    pub fn timegm(arg1: *mut Struct_tm) -> time_t;
    pub fn nanosleep(arg1: *Struct_timespec, arg2: *mut Struct_timespec) ->
     c_int;
    pub fn adjtime(arg1: *Struct_timeval, arg2: *mut Struct_timeval) -> c_int;
    pub fn futimes(arg1: c_int, arg2: *Struct_timeval) -> c_int;
    pub fn lutimes(arg1: *c_schar, arg2: *Struct_timeval) -> c_int;
    pub fn settimeofday(arg1: *Struct_timeval, arg2: *Struct_timezone) ->
     c_int;
    pub fn getitimer(arg1: c_int, arg2: *mut Struct_itimerval) -> c_int;
    pub fn gettimeofday(arg1: *mut Struct_timeval, arg2: *mut c_void) ->
     c_int;
    pub fn select(arg1: c_int, arg2: *mut fd_set, arg3: *mut fd_set,
                  arg4: *mut fd_set, arg5: *mut Struct_timeval) -> c_int;
    pub fn setitimer(arg1: c_int, arg2: *Struct_itimerval,
                     arg3: *mut Struct_itimerval) -> c_int;
    pub fn utimes(arg1: *c_schar, arg2: *Struct_timeval) -> c_int;
    pub fn bpf_validate(arg1: *Struct_bpf_insn, arg2: c_int) -> c_int;
    pub fn bpf_filter(arg1: *Struct_bpf_insn, arg2: *u_char, arg3: u_int,
                      arg4: u_int) -> u_int;
    pub fn clearerr(arg1: *mut FILE);
    pub fn fclose(arg1: *mut FILE) -> c_int;
    pub fn feof(arg1: *mut FILE) -> c_int;
    pub fn ferror(arg1: *mut FILE) -> c_int;
    pub fn fflush(arg1: *mut FILE) -> c_int;
    pub fn fgetc(arg1: *mut FILE) -> c_int;
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> c_int;
    pub fn fgets(arg1: *mut c_schar, arg2: c_int, arg3: *mut FILE) ->
     *mut c_schar;
    pub fn fopen(arg1: *c_schar, arg2: *c_schar) -> *mut FILE;
    pub fn fprintf(arg1: *mut FILE, arg2: *c_schar, ...) -> c_int;
    pub fn fputc(arg1: c_int, arg2: *mut FILE) -> c_int;
    pub fn fputs(arg1: *c_schar, arg2: *mut FILE) -> c_int;
    pub fn fread(arg1: *mut c_void, arg2: size_t, arg3: size_t,
                 arg4: *mut FILE) -> size_t;
    pub fn freopen(arg1: *c_schar, arg2: *c_schar, arg3: *mut FILE) ->
     *mut FILE;
    pub fn fscanf(arg1: *mut FILE, arg2: *c_schar, ...) -> c_int;
    pub fn fseek(arg1: *mut FILE, arg2: c_long, arg3: c_int) -> c_int;
    pub fn fsetpos(arg1: *mut FILE, arg2: *fpos_t) -> c_int;
    pub fn ftell(arg1: *mut FILE) -> c_long;
    pub fn fwrite(arg1: *c_void, arg2: size_t, arg3: size_t, arg4: *mut FILE)
     -> size_t;
    pub fn getc(arg1: *mut FILE) -> c_int;
    pub fn getchar() -> c_int;
    pub fn gets(arg1: *mut c_schar) -> *mut c_schar;
    pub fn perror(arg1: *c_schar);
    pub fn printf(arg1: *c_schar, ...) -> c_int;
    pub fn putc(arg1: c_int, arg2: *mut FILE) -> c_int;
    pub fn putchar(arg1: c_int) -> c_int;
    pub fn puts(arg1: *c_schar) -> c_int;
    pub fn remove(arg1: *c_schar) -> c_int;
    pub fn rename(arg1: *c_schar, arg2: *c_schar) -> c_int;
    pub fn rewind(arg1: *mut FILE);
    pub fn scanf(arg1: *c_schar, ...) -> c_int;
    pub fn setbuf(arg1: *mut FILE, arg2: *mut c_schar);
    pub fn setvbuf(arg1: *mut FILE, arg2: *mut c_schar, arg3: c_int,
                   arg4: size_t) -> c_int;
    pub fn sprintf(arg1: *mut c_schar, arg2: *c_schar, ...) -> c_int;
    pub fn sscanf(arg1: *c_schar, arg2: *c_schar, ...) -> c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(arg1: *mut c_schar) -> *mut c_schar;
    pub fn ungetc(arg1: c_int, arg2: *mut FILE) -> c_int;
    pub fn vfprintf(arg1: *mut FILE, arg2: *c_schar, arg3: va_list) -> c_int;
    pub fn vprintf(arg1: *c_schar, arg2: va_list) -> c_int;
    pub fn vsprintf(arg1: *mut c_schar, arg2: *c_schar, arg3: va_list) ->
     c_int;
    pub fn ctermid(arg1: *mut c_schar) -> *mut c_schar;
    pub fn fdopen(arg1: c_int, arg2: *c_schar) -> *mut FILE;
    pub fn fileno(arg1: *mut FILE) -> c_int;
    pub fn pclose(arg1: *mut FILE) -> c_int;
    pub fn popen(arg1: *c_schar, arg2: *c_schar) -> *mut FILE;
    pub fn __srget(arg1: *mut FILE) -> c_int;
    pub fn __svfscanf(arg1: *mut FILE, arg2: *c_schar, arg3: va_list) ->
     c_int;
    pub fn __swbuf(arg1: c_int, arg2: *mut FILE) -> c_int;
    pub fn flockfile(arg1: *mut FILE);
    pub fn ftrylockfile(arg1: *mut FILE) -> c_int;
    pub fn funlockfile(arg1: *mut FILE);
    pub fn getc_unlocked(arg1: *mut FILE) -> c_int;
    pub fn getchar_unlocked() -> c_int;
    pub fn putc_unlocked(arg1: c_int, arg2: *mut FILE) -> c_int;
    pub fn putchar_unlocked(arg1: c_int) -> c_int;
    pub fn getw(arg1: *mut FILE) -> c_int;
    pub fn putw(arg1: c_int, arg2: *mut FILE) -> c_int;
    pub fn tempnam(arg1: *c_schar, arg2: *c_schar) -> *mut c_schar;
    pub fn fseeko(arg1: *mut FILE, arg2: off_t, arg3: c_int) -> c_int;
    pub fn ftello(arg1: *mut FILE) -> off_t;
    pub fn snprintf(arg1: *mut c_schar, arg2: size_t, arg3: *c_schar, ...) ->
     c_int;
    pub fn vfscanf(arg1: *mut FILE, arg2: *c_schar, arg3: va_list) -> c_int;
    pub fn vscanf(arg1: *c_schar, arg2: va_list) -> c_int;
    pub fn vsnprintf(arg1: *mut c_schar, arg2: size_t, arg3: *c_schar,
                     arg4: va_list) -> c_int;
    pub fn vsscanf(arg1: *c_schar, arg2: *c_schar, arg3: va_list) -> c_int;
    pub fn dprintf(arg1: c_int, arg2: *c_schar, ...) -> c_int;
    pub fn vdprintf(arg1: c_int, arg2: *c_schar, arg3: va_list) -> c_int;
    pub fn getdelim(arg1: *mut *mut c_schar, arg2: *mut size_t, arg3: c_int,
                    arg4: *mut FILE) -> ssize_t;
    pub fn getline(arg1: *mut *mut c_schar, arg2: *mut size_t,
                   arg3: *mut FILE) -> ssize_t;
    pub fn asprintf(arg1: *mut *mut c_schar, arg2: *c_schar, ...) -> c_int;
    pub fn ctermid_r(arg1: *mut c_schar) -> *mut c_schar;
    pub fn fgetln(arg1: *mut FILE, arg2: *mut size_t) -> *mut c_schar;
    pub fn fmtcheck(arg1: *c_schar, arg2: *c_schar) -> *c_schar;
    pub fn fpurge(arg1: *mut FILE) -> c_int;
    pub fn setbuffer(arg1: *mut FILE, arg2: *mut c_schar, arg3: c_int);
    pub fn setlinebuf(arg1: *mut FILE) -> c_int;
    pub fn vasprintf(arg1: *mut *mut c_schar, arg2: *c_schar, arg3: va_list)
     -> c_int;
    pub fn zopen(arg1: *c_schar, arg2: *c_schar, arg3: c_int) -> *mut FILE;
    pub fn funopen(arg1: *c_void,
                   arg2:
                       ::std::option::Option<extern "C" fn
                                                 (arg1: *mut c_void,
                                                  arg2: *mut c_schar,
                                                  arg3: c_int) -> c_int>,
                   arg3:
                       ::std::option::Option<extern "C" fn
                                                 (arg1: *mut c_void,
                                                  arg2: *c_schar, arg3: c_int)
                                                 -> c_int>,
                   arg4:
                       ::std::option::Option<extern "C" fn
                                                 (arg1: *mut c_void,
                                                  arg2: fpos_t, arg3: c_int)
                                                 -> fpos_t>,
                   arg5:
                       ::std::option::Option<extern "C" fn(arg1: *mut c_void)
                                                 -> c_int>) -> *mut FILE;
    pub fn __sprintf_chk(arg1: *mut c_schar, arg2: c_int, arg3: size_t,
                         arg4: *c_schar, ...) -> c_int;
    pub fn __snprintf_chk(arg1: *mut c_schar, arg2: size_t, arg3: c_int,
                          arg4: size_t, arg5: *c_schar, ...) -> c_int;
    pub fn __vsprintf_chk(arg1: *mut c_schar, arg2: c_int, arg3: size_t,
                          arg4: *c_schar, arg5: va_list) -> c_int;
    pub fn __vsnprintf_chk(arg1: *mut c_schar, arg2: size_t, arg3: c_int,
                           arg4: size_t, arg5: *c_schar, arg6: va_list) ->
     c_int;
    pub fn pcap_lookupdev(arg1: *mut c_schar) -> *mut c_schar;
    pub fn pcap_lookupnet(arg1: *c_schar, arg2: *mut bpf_u_int32,
                          arg3: *mut bpf_u_int32, arg4: *mut c_schar) ->
     c_int;
    pub fn pcap_create(arg1: *c_schar, arg2: *mut c_schar) -> *mut pcap_t;
    pub fn pcap_set_snaplen(arg1: *mut pcap_t, arg2: c_int) -> c_int;
    pub fn pcap_set_promisc(arg1: *mut pcap_t, arg2: c_int) -> c_int;
    pub fn pcap_can_set_rfmon(arg1: *mut pcap_t) -> c_int;
    pub fn pcap_set_rfmon(arg1: *mut pcap_t, arg2: c_int) -> c_int;
    pub fn pcap_set_timeout(arg1: *mut pcap_t, arg2: c_int) -> c_int;
    pub fn pcap_set_tstamp_type(arg1: *mut pcap_t, arg2: c_int) -> c_int;
    pub fn pcap_set_buffer_size(arg1: *mut pcap_t, arg2: c_int) -> c_int;
    pub fn pcap_activate(arg1: *mut pcap_t) -> c_int;
    pub fn pcap_list_tstamp_types(arg1: *mut pcap_t, arg2: *mut *mut c_int) ->
     c_int;
    pub fn pcap_free_tstamp_types(arg1: *mut c_int);
    pub fn pcap_tstamp_type_name_to_val(arg1: *c_schar) -> c_int;
    pub fn pcap_tstamp_type_val_to_name(arg1: c_int) -> *c_schar;
    pub fn pcap_tstamp_type_val_to_description(arg1: c_int) -> *c_schar;
    pub fn pcap_open_live(arg1: *c_schar, arg2: c_int, arg3: c_int,
                          arg4: c_int, arg5: *mut c_schar) -> *mut pcap_t;
    pub fn pcap_open_dead(arg1: c_int, arg2: c_int) -> *mut pcap_t;
    pub fn pcap_open_offline(arg1: *c_schar, arg2: *mut c_schar) ->
     *mut pcap_t;
    pub fn pcap_fopen_offline(arg1: *mut FILE, arg2: *mut c_schar) ->
     *mut pcap_t;
    pub fn pcap_close(arg1: *mut pcap_t);
    pub fn pcap_loop(arg1: *mut pcap_t, arg2: c_int, arg3: pcap_handler,
                     arg4: *mut u_char) -> c_int;
    pub fn pcap_dispatch(arg1: *mut pcap_t, arg2: c_int, arg3: pcap_handler,
                         arg4: *mut u_char) -> c_int;
    pub fn pcap_next(arg1: *mut pcap_t, arg2: *mut Struct_pcap_pkthdr) ->
     *u_char;
    pub fn pcap_next_ex(arg1: *mut pcap_t, arg2: *mut *mut Struct_pcap_pkthdr,
                        arg3: *mut *u_char) -> c_int;
    pub fn pcap_breakloop(arg1: *mut pcap_t);
    pub fn pcap_stats(arg1: *mut pcap_t, arg2: *mut Struct_pcap_stat) ->
     c_int;
    pub fn pcap_setfilter(arg1: *mut pcap_t, arg2: *mut Struct_bpf_program) ->
     c_int;
    pub fn pcap_setdirection(arg1: *mut pcap_t, arg2: pcap_direction_t) ->
     c_int;
    pub fn pcap_getnonblock(arg1: *mut pcap_t, arg2: *mut c_schar) -> c_int;
    pub fn pcap_setnonblock(arg1: *mut pcap_t, arg2: c_int,
                            arg3: *mut c_schar) -> c_int;
    pub fn pcap_inject(arg1: *mut pcap_t, arg2: *c_void, arg3: size_t) ->
     c_int;
    pub fn pcap_sendpacket(arg1: *mut pcap_t, arg2: *u_char, arg3: c_int) ->
     c_int;
    pub fn pcap_statustostr(arg1: c_int) -> *c_schar;
    pub fn pcap_strerror(arg1: c_int) -> *c_schar;
    pub fn pcap_geterr(arg1: *mut pcap_t) -> *mut c_schar;
    pub fn pcap_perror(arg1: *mut pcap_t, arg2: *mut c_schar);
    pub fn pcap_compile(arg1: *mut pcap_t, arg2: *mut Struct_bpf_program,
                        arg3: *c_schar, arg4: c_int, arg5: bpf_u_int32) ->
     c_int;
    pub fn pcap_compile_nopcap(arg1: c_int, arg2: c_int,
                               arg3: *mut Struct_bpf_program, arg4: *c_schar,
                               arg5: c_int, arg6: bpf_u_int32) -> c_int;
    pub fn pcap_freecode(arg1: *mut Struct_bpf_program);
    pub fn pcap_offline_filter(arg1: *mut Struct_bpf_program,
                               arg2: *Struct_pcap_pkthdr, arg3: *u_char) ->
     c_int;
    pub fn pcap_datalink(arg1: *mut pcap_t) -> c_int;
    pub fn pcap_datalink_ext(arg1: *mut pcap_t) -> c_int;
    pub fn pcap_list_datalinks(arg1: *mut pcap_t, arg2: *mut *mut c_int) ->
     c_int;
    pub fn pcap_set_datalink(arg1: *mut pcap_t, arg2: c_int) -> c_int;
    pub fn pcap_free_datalinks(arg1: *mut c_int);
    pub fn pcap_datalink_name_to_val(arg1: *c_schar) -> c_int;
    pub fn pcap_datalink_val_to_name(arg1: c_int) -> *c_schar;
    pub fn pcap_datalink_val_to_description(arg1: c_int) -> *c_schar;
    pub fn pcap_snapshot(arg1: *mut pcap_t) -> c_int;
    pub fn pcap_is_swapped(arg1: *mut pcap_t) -> c_int;
    pub fn pcap_major_version(arg1: *mut pcap_t) -> c_int;
    pub fn pcap_minor_version(arg1: *mut pcap_t) -> c_int;
    pub fn pcap_file(arg1: *mut pcap_t) -> *mut FILE;
    pub fn pcap_fileno(arg1: *mut pcap_t) -> c_int;
    pub fn pcap_dump_open(arg1: *mut pcap_t, arg2: *c_schar) ->
     *mut pcap_dumper_t;
    pub fn pcap_dump_fopen(arg1: *mut pcap_t, fp: *mut FILE) ->
     *mut pcap_dumper_t;
    pub fn pcap_dump_file(arg1: *mut pcap_dumper_t) -> *mut FILE;
    pub fn pcap_dump_ftell(arg1: *mut pcap_dumper_t) -> c_long;
    pub fn pcap_dump_flush(arg1: *mut pcap_dumper_t) -> c_int;
    pub fn pcap_dump_close(arg1: *mut pcap_dumper_t);
    pub fn pcap_dump(arg1: *mut u_char, arg2: *Struct_pcap_pkthdr,
                     arg3: *u_char);
    pub fn pcap_findalldevs(arg1: *mut *mut pcap_if_t, arg2: *mut c_schar) ->
     c_int;
    pub fn pcap_freealldevs(arg1: *mut pcap_if_t);
    pub fn pcap_lib_version() -> *c_schar;
    pub fn bpf_image(arg1: *Struct_bpf_insn, arg2: c_int) -> *mut c_schar;
    pub fn bpf_dump(arg1: *Struct_bpf_program, arg2: c_int);
    pub fn pcap_get_selectable_fd(arg1: *mut pcap_t) -> c_int;
}
