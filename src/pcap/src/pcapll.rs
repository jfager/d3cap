#![allow(non_camel_case_types)]

/* initially generated by rust-bindgen */

pub type u_char = ::libc::c_uchar;
pub type u_int = ::libc::c_uint;
pub type u_short = ::libc::c_ushort;
pub type size_t = ::libc::size_t;
pub type FILE = ::libc::FILE;

pub type bpf_int32 = ::libc::c_int;
pub type bpf_u_int32 = u_int;
#[repr(C)]
#[derive(Copy,Clone)]
pub struct Struct_bpf_program {
    pub bf_len: u_int,
    pub bf_insns: *mut Struct_bpf_insn,
}
impl ::std::default::Default for Struct_bpf_program {
    fn default() -> Struct_bpf_program { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy,Clone)]
pub struct Struct_bpf_insn {
    pub code: u_short,
    pub jt: u_char,
    pub jf: u_char,
    pub k: bpf_u_int32,
}
impl ::std::default::Default for Struct_bpf_insn {
    fn default() -> Struct_bpf_insn { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_pcap { }
pub type pcap_t = Struct_pcap;
pub enum Struct_pcap_dumper { }
pub type pcap_dumper_t = Struct_pcap_dumper;
pub type pcap_if_t = Struct_pcap_if;
pub type pcap_addr_t = Struct_pcap_addr;
#[repr(C)]
#[derive(Copy,Clone)]
pub struct Struct_pcap_file_header {
    pub magic: bpf_u_int32,
    pub version_major: u_short,
    pub version_minor: u_short,
    pub thiszone: bpf_int32,
    pub sigfigs: bpf_u_int32,
    pub snaplen: bpf_u_int32,
    pub linktype: bpf_u_int32,
}
impl ::std::default::Default for Struct_pcap_file_header {
    fn default() -> Struct_pcap_file_header {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_Unnamed1 = ::libc::c_uint;
pub const PCAP_D_INOUT: ::libc::c_uint = 0;
pub const PCAP_D_IN: ::libc::c_uint = 1;
pub const PCAP_D_OUT: ::libc::c_uint = 2;
pub type pcap_direction_t = Enum_Unnamed1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_pcap_pkthdr {
    pub ts: ::libc::timeval,
    pub caplen: bpf_u_int32,
    pub len: bpf_u_int32,
    pub comment: [::libc::c_char; 256usize],
}

impl Clone for Struct_pcap_pkthdr {
    fn clone(&self) -> Struct_pcap_pkthdr {
        Struct_pcap_pkthdr { ..*self }
    }
}


impl ::std::default::Default for Struct_pcap_pkthdr {
    fn default() -> Struct_pcap_pkthdr { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy,Clone)]
pub struct Struct_pcap_stat {
    pub ps_recv: u_int,
    pub ps_drop: u_int,
    pub ps_ifdrop: u_int,
}
impl ::std::default::Default for Struct_pcap_stat {
    fn default() -> Struct_pcap_stat { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy,Clone)]
pub struct Struct_pcap_if {
    pub next: *mut Struct_pcap_if,
    pub name: *mut ::libc::c_char,
    pub description: *mut ::libc::c_char,
    pub addresses: *mut Struct_pcap_addr,
    pub flags: bpf_u_int32,
}
impl ::std::default::Default for Struct_pcap_if {
    fn default() -> Struct_pcap_if { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_sockaddr { }
#[repr(C)]
#[derive(Copy,Clone)]
pub struct Struct_pcap_addr {
    pub next: *mut Struct_pcap_addr,
    pub addr: *mut Struct_sockaddr,
    pub netmask: *mut Struct_sockaddr,
    pub broadaddr: *mut Struct_sockaddr,
    pub dstaddr: *mut Struct_sockaddr,
}
impl ::std::default::Default for Struct_pcap_addr {
    fn default() -> Struct_pcap_addr { unsafe { ::std::mem::zeroed() } }
}
pub type pcap_handler =
    ::std::option::Option<extern "C" fn(arg1: *mut u_char,
                                        arg2: *const Struct_pcap_pkthdr,
                                        arg3: *const u_char) -> ()>;
#[link(name = "pcap")]
extern "C" {
    pub fn bpf_validate(f: *const Struct_bpf_insn, len: ::libc::c_int)
     -> ::libc::c_int;
    pub fn bpf_filter(arg1: *const Struct_bpf_insn, arg2: *const u_char,
                      arg3: u_int, arg4: u_int) -> u_int;
    pub fn pcap_lookupdev(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn pcap_lookupnet(arg1: *const ::libc::c_char, arg2: *mut bpf_u_int32,
                          arg3: *mut bpf_u_int32, arg4: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn pcap_create(arg1: *const ::libc::c_char, arg2: *mut ::libc::c_char)
     -> *mut pcap_t;
    pub fn pcap_set_snaplen(arg1: *mut pcap_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pcap_set_promisc(arg1: *mut pcap_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pcap_can_set_rfmon(arg1: *mut pcap_t) -> ::libc::c_int;
    pub fn pcap_set_rfmon(arg1: *mut pcap_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pcap_set_timeout(arg1: *mut pcap_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pcap_set_tstamp_type(arg1: *mut pcap_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pcap_set_buffer_size(arg1: *mut pcap_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pcap_activate(arg1: *mut pcap_t) -> ::libc::c_int;
    pub fn pcap_apple_set_exthdr(p: *mut pcap_t, arg1: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pcap_list_tstamp_types(arg1: *mut pcap_t,
                                  arg2: *mut *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pcap_free_tstamp_types(arg1: *mut ::libc::c_int) -> ();
    pub fn pcap_tstamp_type_name_to_val(arg1: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn pcap_tstamp_type_val_to_name(arg1: ::libc::c_int)
     -> *const ::libc::c_char;
    pub fn pcap_tstamp_type_val_to_description(arg1: ::libc::c_int)
     -> *const ::libc::c_char;
    pub fn pcap_open_live(arg1: *const ::libc::c_char, arg2: ::libc::c_int,
                          arg3: ::libc::c_int, arg4: ::libc::c_int,
                          arg5: *mut ::libc::c_char) -> *mut pcap_t;
    pub fn pcap_open_dead(arg1: ::libc::c_int, arg2: ::libc::c_int)
     -> *mut pcap_t;

    pub fn pcap_open_offline(arg1: *const ::libc::c_char,
                             arg2: *mut ::libc::c_char) -> *mut pcap_t;
    pub fn pcap_fopen_offline(arg1: *mut FILE, arg2: *mut ::libc::c_char)
     -> *mut pcap_t;

    pub fn pcap_close(arg1: *mut pcap_t) -> ();
    pub fn pcap_loop(arg1: *mut pcap_t, arg2: ::libc::c_int,
                     arg3: pcap_handler, arg4: *mut u_char) -> ::libc::c_int;
    pub fn pcap_dispatch(arg1: *mut pcap_t, arg2: ::libc::c_int,
                         arg3: pcap_handler, arg4: *mut u_char)
     -> ::libc::c_int;
    pub fn pcap_next(arg1: *mut pcap_t, arg2: *mut Struct_pcap_pkthdr)
     -> *const u_char;
    pub fn pcap_next_ex(arg1: *mut pcap_t, arg2: *mut *mut Struct_pcap_pkthdr,
                        arg3: *mut *const u_char) -> ::libc::c_int;
    pub fn pcap_breakloop(arg1: *mut pcap_t) -> ();
    pub fn pcap_stats(arg1: *mut pcap_t, arg2: *mut Struct_pcap_stat)
     -> ::libc::c_int;
    pub fn pcap_setfilter(arg1: *mut pcap_t, arg2: *mut Struct_bpf_program)
     -> ::libc::c_int;
    pub fn pcap_setdirection(arg1: *mut pcap_t, arg2: pcap_direction_t)
     -> ::libc::c_int;
    pub fn pcap_getnonblock(arg1: *mut pcap_t, arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn pcap_setnonblock(arg1: *mut pcap_t, arg2: ::libc::c_int,
                            arg3: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn pcap_inject(arg1: *mut pcap_t, arg2: *const ::libc::c_void,
                       arg3: size_t) -> ::libc::c_int;
    pub fn pcap_sendpacket(arg1: *mut pcap_t, arg2: *const u_char,
                           arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn pcap_statustostr(arg1: ::libc::c_int) -> *const ::libc::c_char;
    pub fn pcap_strerror(arg1: ::libc::c_int) -> *const ::libc::c_char;
    pub fn pcap_geterr(arg1: *mut pcap_t) -> *mut ::libc::c_char;
    pub fn pcap_perror(arg1: *mut pcap_t, arg2: *mut ::libc::c_char) -> ();
    pub fn pcap_compile(arg1: *mut pcap_t, arg2: *mut Struct_bpf_program,
                        arg3: *const ::libc::c_char, arg4: ::libc::c_int,
                        arg5: bpf_u_int32) -> ::libc::c_int;
    pub fn pcap_compile_nopcap(arg1: ::libc::c_int, arg2: ::libc::c_int,
                               arg3: *mut Struct_bpf_program,
                               arg4: *const ::libc::c_char,
                               arg5: ::libc::c_int, arg6: bpf_u_int32)
     -> ::libc::c_int;
    pub fn pcap_freecode(arg1: *mut Struct_bpf_program) -> ();
    pub fn pcap_offline_filter(arg1: *mut Struct_bpf_program,
                               arg2: *const Struct_pcap_pkthdr,
                               arg3: *const u_char) -> ::libc::c_int;
    pub fn pcap_datalink(arg1: *mut pcap_t) -> ::libc::c_int;
    pub fn pcap_datalink_ext(arg1: *mut pcap_t) -> ::libc::c_int;
    pub fn pcap_list_datalinks(arg1: *mut pcap_t,
                               arg2: *mut *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pcap_set_datalink(arg1: *mut pcap_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pcap_free_datalinks(arg1: *mut ::libc::c_int) -> ();
    pub fn pcap_datalink_name_to_val(arg1: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn pcap_datalink_val_to_name(arg1: ::libc::c_int)
     -> *const ::libc::c_char;
    pub fn pcap_datalink_val_to_description(arg1: ::libc::c_int)
     -> *const ::libc::c_char;
    pub fn pcap_snapshot(arg1: *mut pcap_t) -> ::libc::c_int;
    pub fn pcap_is_swapped(arg1: *mut pcap_t) -> ::libc::c_int;
    pub fn pcap_major_version(arg1: *mut pcap_t) -> ::libc::c_int;
    pub fn pcap_minor_version(arg1: *mut pcap_t) -> ::libc::c_int;

    pub fn pcap_file(arg1: *mut pcap_t) -> *mut FILE;

    pub fn pcap_fileno(arg1: *mut pcap_t) -> ::libc::c_int;
    pub fn pcap_dump_open(arg1: *mut pcap_t, arg2: *const ::libc::c_char)
     -> *mut pcap_dumper_t;

    pub fn pcap_dump_fopen(arg1: *mut pcap_t, fp: *mut FILE)
     -> *mut pcap_dumper_t;
    pub fn pcap_dump_file(arg1: *mut pcap_dumper_t) -> *mut FILE;

    pub fn pcap_dump_ftell(arg1: *mut pcap_dumper_t) -> ::libc::c_long;
    pub fn pcap_dump_flush(arg1: *mut pcap_dumper_t) -> ::libc::c_int;
    pub fn pcap_dump_close(arg1: *mut pcap_dumper_t) -> ();
    pub fn pcap_dump(arg1: *mut u_char, arg2: *const Struct_pcap_pkthdr,
                     arg3: *const u_char) -> ();
    pub fn pcap_findalldevs(arg1: *mut *mut pcap_if_t,
                            arg2: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn pcap_freealldevs(arg1: *mut pcap_if_t) -> ();
    pub fn pcap_lib_version() -> *const ::libc::c_char;
    pub fn bpf_image(arg1: *const Struct_bpf_insn, arg2: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn bpf_dump(arg1: *const Struct_bpf_program, arg2: ::libc::c_int)
     -> ();
    pub fn pcap_get_selectable_fd(arg1: *mut pcap_t) -> ::libc::c_int;
}
